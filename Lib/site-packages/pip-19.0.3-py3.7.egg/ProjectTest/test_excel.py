
import re
import time
import os
import sys
import uuid
from copy import copy

import pandas as pd
import collections

from win32com.client import Dispatch
from xml.etree.ElementTree import ElementTree
import xml.etree.ElementTree as ET
import csv

def listit(t):
    return list(map(listit, t)) if isinstance(t, (list, tuple)) else t

REF_EXCEL_ORIGIN_PATH = "/../reference_files/0-2_ICU_Vehicle_Function_Specification_61th_201130.xlsm-CN7 N (경신검토_210105)_복호화.xlsm"
REF_EXCEL_NEW_PATH = "/../reference_files/0-2_ICU_Vehicle_Function_Specification_62th_201229-CN7 N (경신검토_210201).xlsm"
REF_EXCEL_RESULT_PATH = "/../reference_files/result.xlsx"

REF_CVS_RESULT_PATH = "/../reference_files/result.csv"
REF_CVS_RESULT1_PATH = "/../reference_files/result1.csv"
REF_CVS_RESULT2_PATH = "/../reference_files/result2.csv"
REF_CVS_RESULT3_PATH = "/../reference_files/result3.csv"

compare_data0 = []
compare_data1 = []
compare_apply_flag0 = []
compare_apply_flag1 = []

filename = os.path.dirname(__file__)+REF_EXCEL_ORIGIN_PATH
xlApp = Dispatch("Excel.Application")
xlWb = xlApp.Workbooks.Open(filename)
print(filename)
sheet = xlWb.Sheets('IO')
# data = sheet.Range("B16").CurrentRegion
# data = data.Value
# print(data)
# i = 16
#for value in sheet.Range("EG16:EG"+"17158").Value:
# for value in sheet.Range("EG16:EG"+str(i)).Value:
#     print(value)
#     if value == None:
#         print(i)
#         break
#     i = i + 1
#     print(i)
# while True:
#     temp_value = sheet.Range("EG" + str(i)).Value
#     # print(temp_value)
#     if temp_value == None:
#         print(i)
#         break
#     i = i + 1
# value = sheet.Range("EG16:EG" + str(i)).Value
#data = sheet.Range("B16:M17156").Value
data = sheet.Range("B16:M21457").Value
data = listit(data)
#data = list(data)
#apply_flag = sheet.Range("EG16:EG17156").Value
apply_flag = sheet.Range("AK16:AK21457").Value
apply_flag = listit(apply_flag)
xlWb.Close(True)

i = 0
# for tempdata in data:
#     data[i] = data[i] + apply_flag[i]
#     # print(data[i])
#     i = i + 1
compare_data0 = data
compare_apply_flag0 = apply_flag

# print(data)
# print(apply_flag)


filename = os.path.dirname(__file__)+REF_EXCEL_NEW_PATH
xlApp = Dispatch("Excel.Application")
xlWb = xlApp.Workbooks.Open(filename)
print(filename)
sheet = xlWb.Sheets('IO')

data = sheet.Range("B16:M21018").Value
data = listit(data)
apply_flag = sheet.Range("AK16:AK21018").Value
apply_flag = listit(apply_flag)

# i = 0
# for tempdata in data:
#     data[i] = data[i] + apply_flag[i]
#     print(data[i])
#     i = i + 1
compare_data1 = data
compare_apply_flag1 = apply_flag
# print(compare_data1)
# print(data)
# print(apply_flag)
xlWb.Close(True)

i = 0
j = 0
temp_compared_data = copy(compare_data1)
temp_compare_apply_flag = copy(compare_apply_flag1)
temp_same_data = []
temp_different_data = []
temp_removed_data = []
temp_added_data = []
# for data0 in compare_data0:
#     i = 0
#     for data1 in compare_data1:
#         if compare_data0[l] == compare_data1[i]:
#             temp_compared_data.remove(compare_data0[l])
#             if compare_apply_flag0[l] == compare_apply_flag1[i]:
#                 temp_same_data.append(compare_data1[i] + compare_apply_flag1[i])
#                 j = j + 1
#             else:
#                 temp_different_data.append(compare_data1[i] + compare_apply_flag0[l] + ["→"] + compare_apply_flag1[i])
#                 k = k + 1
#             l = l + 1
#             break
#         i = i + 1

for i in range(len(compare_data1)):
    temp_added_data.append(compare_data1[i] + compare_apply_flag1[i])

for data0 in compare_data0:
    i = 0
    for i in range(len(temp_compared_data)):
        if compare_data0[j] == temp_compared_data[i]:
            if compare_apply_flag0[j] == temp_compare_apply_flag[i]:
                try:
                    temp_same_data.append(temp_compared_data[i] + temp_compare_apply_flag[i])
                except:
                    pass
            else:
                temp_different_data.append(temp_compared_data[i] + compare_apply_flag0[j] + ["⇒"] + temp_compare_apply_flag[i])
            # temp_compared_data.remove(temp_compared_data[i])
            try:
                # temp_compare_apply_flag.remove(temp_compare_apply_flag[i])
                del temp_compared_data[i]
                del temp_compare_apply_flag[i]
                del temp_added_data[i]
            except:
                pass
            break
        if i == len(temp_compared_data):
            temp_removed_data.append(compare_data0[j]+compare_apply_flag0[j])
    j = j + 1
print(temp_different_data)



# filename = os.path.dirname(__file__)+REF_EXCEL_RESULT_PATH
# xlApp = Dispatch("Excel.Application")
# xlApp.Visible = False
# xlWb = xlApp.Workbooks.Add()
# sheet = xlWb.Worksheets("Sheet1")
# # sheet = xlWb.Worksheets("Different")
# # sheet = xlWb.Worksheets("Added")
# # sheet = xlWb.Worksheets("Removed")
# rowlength = len(temp_different_data)
# columnlength = len(temp_different_data[0])
# print(rowlength)
# print(columnlength)
# # print("A1:"+chr(ord('A')+rowlength)+str(columnlength))
# # sheet.Range("A1:"+chr(ord('A')+rowlength)+str(columnlength)).Value = temp_different_data
# sheet.Range(sheet.Cells(1, 1), sheet.Cells(rowlength,columnlength))
# sheet.Range(sheet.Cells(1, 1), sheet.Cells(rowlength,columnlength)).Value = temp_different_data
# xlWb.Close(True)

# filename = open(os.path.dirname(__file__)+REF_CVS_RESULT_PATH,'w')
# makewrite = csv.writer(filename)
# for i in temp_different_data:
#     # for j in temp_different_data[i]:
#     #     makewrite.writerow(j)
#     makewrite.writerow(i)
#     print(i)

# with open(os.path.dirname(__file__)+REF_EXCEL_ORIGIN_PATH,'w', newline='') as f:
#     makewrite = csv.writer(f)
#     for i in range(len(temp_different_data)):
#         # for j in temp_different_data[i]:
#         #     makewrite.writerow(j)
#         makewrite.writerow(temp_different_data[i])
#         print(temp_different_data[i])

# xlWb.SaveAs(filename)
# xlWb.SaveAs('c:\\test.xlsx')
# print(filename)
# sheet = xlWb.Sheets('IO')
#
# data = sheet.Range("B16:M21457").Value
# data = listit(data)
# apply_flag = sheet.Range("AK16:AK21457").Value
# apply_flag = listit(apply_flag)
#
# compare_data1 = data
# compare_apply_flag1 = apply_flag

excelData = pd.DataFrame(temp_different_data)
# excelData.to_excel((os.path.dirname(__file__)+REF_CVS_RESULT_PATH), # directory and file name to write
#     sheet_name = 'Sheet1',
#     na_rep = 'NaN',
#     float_format = "%.2f",
#     header = True,
#     #columns = ["group", "value_1", "value_2"], # if header is False
#     index = True,
#     index_label = "id",
#     startrow = 1,
#     startcol = 1,
#     #engine = 'xlsxwriter',
#     freeze_panes = (2, 0)
#     )
# excelData.to_excel(os.path.dirname(__file__)+REF_EXCEL_RESULT_PATH
#                    , sheet_name="Different")             # need a xlsxwriter module!!!
#
# excelData = pd.DataFrame(temp_same_data)
# excelData.to_excel(os.path.dirname(__file__)+REF_EXCEL_RESULT1_PATH
#                    , sheet_name="Equal")
#
# excelData = pd.DataFrame(temp_added_data)
# excelData.to_excel(os.path.dirname(__file__)+REF_EXCEL_RESULT2_PATH
#                    , sheet_name="Added")
#
# excelData = pd.DataFrame(temp_removed_data)
# excelData.to_excel(os.path.dirname(__file__)+REF_EXCEL_RESULT3_PATH
#                    , sheet_name="Removed")
writer = pd.ExcelWriter(os.path.dirname(__file__)+REF_EXCEL_RESULT_PATH)

excelData.to_excel(writer
                   , sheet_name="Different")             # need a xlsxwriter module!!!

excelData = pd.DataFrame(temp_same_data)
excelData.to_excel(writer
                   , sheet_name="Equal")

excelData = pd.DataFrame(temp_added_data)
excelData.to_excel(writer
                   , sheet_name="Added")

excelData = pd.DataFrame(temp_removed_data)
excelData.to_excel(writer
                   , sheet_name="Removed")

# Close the Pandas Excel writer and output the Excel file.
writer.save()

def ExcelLoad(spec, Info):
    filename = os.getcwd() + '\\' + Info.In_Folder + '\\' + spec
    xlApp = Dispatch("Excel.Application")
    xlWb = xlApp.Workbooks.Open(filename)
    sheet = xlWb.Sheets('DTC List')
    data = sheet.Range("A1").CurrentRegion
    data = data.Value
    data = listit(data)
    xlWb.Close(True)
    xlApp.Quit()

    for temprow in data:
        for idx, val in enumerate(temprow):
            if type(val) is float:
                temprow[idx] = unicode(int(val))

    row1 = data[1];
    fieldBuffer = []
    for index, temp in enumerate(row1):
        if row1[index]:
            row1V = row1[index]
            row1V = re.sub(r'\s+', "_", row1V)
            fieldBuffer.append(row1V)
    print
    fieldBuffer
    excelData = pd.DataFrame(data[2:], columns=fieldBuffer)
    try:
        excelData['Descript'] = excelData['Descript'].replace('\s+', '', regex=True)
    except:
        excelData['Descript'] = excelData['DTC']
    return excelData


def Search_Excelfile(path):
    file_list = os.listdir(path)
    Excel_list = []

    print
    'Excel File List :'
    for file in file_list:
        if '.xls' in file or '.xlsx' in file:
            Excel_list.append(file)
            print
            file

    return Excel_list[0]
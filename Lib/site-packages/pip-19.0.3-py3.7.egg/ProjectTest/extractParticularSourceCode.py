
import re
import os

TARGET_PATH = '''D:\\ksc\Workspace_Odin\\bc3_swp\\bc3_icu_ver3.04\\Static_Code\\Code'''
#TARGET_PATH = '''D:\\ksc\Workspace_Odin\\bc3_swp\\bc3_icu_ver3.04\\Static_Code\\Code\\DIG'''
#D:\Ksc\Workspace_Odin\bc3_swp\bc3_icu_ver3.04\Static_Code\Code

# test 코드
# tempLists = os.listdir(TARGET_PATH)
# for tempList in tempLists:
#     if tempList.endswith('.c'):
#         print(tempList)

# test 코드
# p = re.compile('.+_Write\(uint')
# m = p.match('static void m_HoodStateMemorySave_Write(uint8 ubL_m_HoodStateMemorySave)')
# print(m)
#=====================사용하나 임시로 주석처러(테스트 속도)===============
#p = re.compile('.+_Write\(uint')
p = []
# p[0] = re.compile('.+_Write\(uint')
# p[1] = re.compile('.+_Write\(uint')
p.append(re.compile('.+_Write\(uint'))
p.append(re.compile('.+_Set_m_\(uint'))
for path, dirs, files in os.walk(TARGET_PATH):
    #print(path, files)     # 전체 파일 패스와 파일이름 출력
    if len(files) == 0:
        print("파일 없음")
    else:
        for file in files:
            if file.endswith('.c'):     #확장자가 '.c'인 파일만 추출
                print(path + "\\" + file)
                #f = open(path + "\\" + file,'r', encoding='UTF-8')
                #f = open(path + "\\" + file, 'r', encoding='UTF-16')
                #f = open(path + "\\" + file, 'r', encoding='cp949')
                #f = open(path + "\\" + file, 'r', encoding='euc-kr')
                #f = open(path + "\\" + file, 'r')
                #print(f.readlines())
                findFlag = 0
                blockStartFlag = 0
                blockCount = 0

                try:
                    f = open(path + "\\" + file, 'r', encoding='cp949')
                    for line in f.readlines():
                        if findFlag == 0:
                            if (p[0].match(line) != None or p[1].match(line) != None) and line.find(';') == -1:
                                print(line)            # 라인 출력
                                findFlag = 1
                        elif findFlag == 1:
                            if '{' in line:
                                blockCount = blockCount + 1
                            elif '}' in line:
                                blockCount = blockCount - 1
                                if blockCount == 0:
                                    findFlag = 0
                            print(line)
                except:
                    f = open(path + "\\" + file, 'r', encoding='UTF-8')
                    for line in f.readlines():
                        if findFlag == 0:
                            if (p[0].match(line) != None or p[1].match(line) != None) and line.find(';') == -1:
                                print(line)            # 라인 출력
                                findFlag = 1
                        elif findFlag == 1:
                            if '{' in line:
                                blockCount = blockCount + 1
                            elif '}' in line:
                                blockCount = blockCount - 1
                                if blockCount == 0:
                                    findFlag = 0
                            print(line)
                # for line in f.lines():
                #     print(line)
#=====================================================================

ff = open("d://testtest.txt",'w')

ff.write(f.read())
f.close()
ff.close()

def ExcelLoad(spec, Info):
    filename = os.getcwd() + '\\' + Info.In_Folder + '\\' + spec
    xlApp = Dispatch("Excel.Application")
    xlWb = xlApp.Workbooks.Open(filename)
    sheet = xlWb.Sheets('DTC List')
    data = sheet.Range("A1").CurrentRegion
    data = data.Value
    data = listit(data)
    xlWb.Close(True)
    xlApp.Quit()

    for temprow in data:
        for idx, val in enumerate(temprow):
            if type(val) is float:
                temprow[idx] = unicode(int(val))

    row1 = data[1];
    fieldBuffer = []
    for index, temp in enumerate(row1):
        if row1[index]:
            row1V = row1[index]
            row1V = re.sub(r'\s+', "_", row1V)
            fieldBuffer.append(row1V)
    print
    fieldBuffer
    excelData = pd.DataFrame(data[2:], columns=fieldBuffer)
    try:
        excelData['Descript'] = excelData['Descript'].replace('\s+', '', regex=True)
    except:
        excelData['Descript'] = excelData['DTC']
    return excelData

def Search_Excelfile(path):
    file_list = os.listdir(path)
    Excel_list = []

    print
    'Excel File List :'
    for file in file_list:
        if '.xls' in file or '.xlsx' in file:
            Excel_list.append(file)
            print
            file

    return Excel_list[0]
import re
import os
import xml.etree.ElementTree as ET
#XML을 보기 좋게 만들어 저장
from xml.dom import minidom
from xml.etree.ElementTree import Element, SubElement, ElementTree, dump
from xml.etree import ElementTree
import uuid
import json


# 보기 좋게 xml 만드는 함수, 줄바꿈, 들여쓰기 작업
def indent(elem, level=0): #자료 출처 https://goo.gl/J8VoDK
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i


#file 불러오기
target_path = 'C:\\test_python_making_arxml\\NvMManagerSwc.arxml'        #원본
targetXML = open(target_path, 'rt', encoding='UTF8')

# 네임스페이스 너무 어려움...나중에 다시...
ET.register_namespace('',"http://autosar.org/schema/r4.0")
ET.register_namespace('xsi',"http://www.w3.org/2001/XMLSchema-instance")
#ET.register_namespace('schemaLocation',"http://autosar.org/schema/r4.0")
ns = {
    '':"http://autosar.org/schema/r4.0",
    'xsi':"http://www.w3.org/2001/XMLSchema-instance",
    #'schemaLocation':"http://autosar.org/schema/r4.0 autosar_4-3-0.xsd"
}
#
# namespace = {"":"http://autosar.org/schema/r4.0"}

# from xml.parsers import expat
#
# class DisableXmlNamespaces:
#     def __enter__(self):
#             self.oldcreate = expat.ParserCreate
#             expat.ParserCreate = lambda encoding, sep: self.oldcreate(encoding, None)
#     def __exit__(self, type, value, traceback):
#             expat.ParserCreate = self.oldcreate
#
# with DisableXmlNamespaces():
tree = ET.parse(targetXML)
root = tree.getroot()
# namespace 때문에 임시방편으로 로직 구현

def make_OPERATION_INVOKED_EVENT_FORMAT_FUNC(PARA0):
    UUID = str(uuid.uuid4())
    ADD_ELEMENT_FORMAT = \
        f'''
                <OPERATION-INVOKED-EVENT UUID="{UUID}">
                  <SHORT-NAME>OIE_Runnable0_P_PNJF_NvMBlock_{PARA0}_JobFinished</SHORT-NAME>
                  <START-ON-EVENT-REF DEST="RUNNABLE-ENTITY">/Swc/NvMManagerSwc/InternalBehavior/{PARA0}_JobFinished</START-ON-EVENT-REF>
                  <OPERATION-IREF>
                    <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/Swc/NvMManagerSwc/P_PNJF_NvMBlock_{PARA0}</CONTEXT-P-PORT-REF>
                    <TARGET-PROVIDED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/Svc_NvM/NvMNotifyJobFinished/JobFinished</TARGET-PROVIDED-OPERATION-REF>
                  </OPERATION-IREF>
                </OPERATION-INVOKED-EVENT>
        '''
    return ADD_ELEMENT_FORMAT
def make_RUNNABLE_ENTITY_FORMAT_FUNC(PARA0):
    UUID = str(uuid.uuid4())
    ADD_ELEMENT_FORMAT = \
        f'''
                <RUNNABLE-ENTITY UUID="{UUID}">
                  <SHORT-NAME>{PARA0}_JobFinished</SHORT-NAME>
                  <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                  <SYMBOL>{PARA0}_JobFinished</SYMBOL>
                </RUNNABLE-ENTITY>
        '''
    return ADD_ELEMENT_FORMAT

targetChild = root.find("{http://autosar.org/schema/r4.0}AR-PACKAGES/"
                           "{http://autosar.org/schema/r4.0}AR-PACKAGE/"
                           "{http://autosar.org/schema/r4.0}ELEMENTS/"
                           "{http://autosar.org/schema/r4.0}APPLICATION-SW-COMPONENT-TYPE/"
                           "{http://autosar.org/schema/r4.0}INTERNAL-BEHAVIORS/"
                           "{http://autosar.org/schema/r4.0}SWC-INTERNAL-BEHAVIOR/"
                           "{http://autosar.org/schema/r4.0}EVENTS"
                           )
# print(targetChild)
NvMList = ("IntTst_TestBlock1",
"IntTst_TestBlock2",
"PartNumber",
"Date",
"HWVersion",
"SerialNumber",
"m_Security",
"m_CSAC_Odometer",
"m_CSAC_OdometerNotSave",
"m_LocalSignal_forWU",
"m_ComSignal_forWU",
"m_RemoteStartState",
"m_TransmissionSetState",
"m_SMKOptionState",
"m_PersonalizeOption",
"m_PTGOptionState",
"m_PTGModeState",
"m_HoodStateMemorySave",
"m_OneTouchTurnOptionState",
"m_OneTouchTurnModeState_DriverOne",
"m_OneTouchTurnModeState_DriverTwo",
"m_OneTouchTurnModeState_Guest",
"m_MFSWOption",
"m_HazardSwState",
"m_HistoryRecord_AfterFirstReset",
"m_HistoryRecord_Odometer_First",
"m_HistoryRecord_BAT_SOC_First",
"m_HistoryRecord_BAT_SOH_First",
"m_HistoryRecord_Odometer_Final",
"m_HistoryRecord_BAT_SOC_Final",
"m_HistoryRecord_BAT_SOH_Final",
"m_HistoryRecord_Number",
"m_EcuSleepEvent",
"m_NonSleepEventCount",
"m_Wakeup_10s_MCAN",
"m_Wakeup_10s_BCAN",
"m_Wakeup_10s_EventCount_BCAN",
"m_Wakeup_10s_MemoryWrite_BCAN",
"m_Wakeup_10s_MemoryShift_BCAN",
"m_Wakeup_10s_EventCount_MCAN",
"m_Wakeup_10s_MemoryWrite_MCAN",
"m_Wakeup_10s_MemoryShift_MCAN",
"m_ICUPowerAutoCutMode")

for data in NvMList:
    tempData = make_OPERATION_INVOKED_EVENT_FORMAT_FUNC(data)
    addElsement = ElementTree.fromstring(tempData)
    targetChild.append(addElsement)
# addElsement.attrib["UUID"] = str(uuid.uuid4())
# print(addElsement.get("UUID"))


targetChild = root.find("{http://autosar.org/schema/r4.0}AR-PACKAGES/"
                           "{http://autosar.org/schema/r4.0}AR-PACKAGE/"
                           "{http://autosar.org/schema/r4.0}ELEMENTS/"
                           "{http://autosar.org/schema/r4.0}APPLICATION-SW-COMPONENT-TYPE/"
                           "{http://autosar.org/schema/r4.0}INTERNAL-BEHAVIORS/"
                           "{http://autosar.org/schema/r4.0}SWC-INTERNAL-BEHAVIOR/"
                           "{http://autosar.org/schema/r4.0}RUNNABLES"
                           )

for data in NvMList:
    tempData = make_RUNNABLE_ENTITY_FORMAT_FUNC(data)
    addElsement = ElementTree.fromstring(tempData)
    targetChild.append(addElsement)
# dump(targetChild)
dump(root)
#
# for containersChilds in containers:
#     print(containersChilds)
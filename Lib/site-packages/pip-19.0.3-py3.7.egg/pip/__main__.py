from __future__ import absolute_import

import os
import sys
import binascii

REF_MAP_PATH = "/../reference_files/e_ne_icu_asr_swp_FBL.map"

# If we are running from a wheel, add the wheel to sys.path
# This allows the usage python pip-*.whl/pip install pip-*.whl
if __package__ == '':
    # __file__ is pip-*.whl/pip/__main__.py
    # first dirname call strips of '/__main__.py', second strips off '/pip'
    # Resulting path is the name of the wheel itself
    # Add that to sys.path so we can import pip
    path = os.path.dirname(os.path.dirname(__file__))
    sys.path.insert(0, path)

from pip._internal import main as _main  # isort:skip # noqa

if __name__ == '__main__':
    print("__________________________________________________________________")
    print(os.path.abspath(os.path.dirname(__file__)))
    print(os.path.dirname(__file__)+"/../")
    print(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    print(os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
    print(os.path.dirname(os.path.dirname(__file__)))
    print(os.path.dirname(__file__))
    print("__________________________________________________________________")
    # test_ref_map_file = open(os.path.dirname(__file__)+REF_MAP_PATH,"w")
    # for i in range(1,11):
    #     date = "%d번째 줄입니다....\n" % i
    #     test_ref_map_file.write(date)
    # test_ref_map_file.close()
    test_ref_map_file = open(os.path.dirname(__file__)+REF_MAP_PATH, "r")
    lines = test_ref_map_file.readlines()
    start_check_flag = False
    i = 0
    temp_buf = []
    ramsize_result = 0
    romsize_result = 0
    for line in lines:
        temp_line = line.strip()
        temp_line_split = temp_line.split()
        if start_check_flag:
            #dict_buf = {'Section':temp_line.split()[1], 'Base':temp_line.split()[2]}
            if len(temp_line_split)==0:
                start_check_flag = False
                break
            else:
                temp_buf.append([])
                temp_buf[i].append(temp_line_split[0])
                temp_buf[i].append(temp_line_split[1])
                temp_buf[i].append(temp_line_split[2])
                temp_buf[i].append(temp_line_split[3])
                temp_buf[i].append(temp_line_split[4])
                if int(temp_line_split[1], 16) >= int("00FC0000", 16) and int(temp_line_split[1], 16) < int("40000000", 16):
                    romsize_result = romsize_result + int(temp_line_split[3], 0)
                elif int(temp_line_split[1], 16) >= int("40000000", 16):
                    ramsize_result = ramsize_result + int(temp_line_split[3], 0)
                i = i+1
                print(temp_buf[i-1])
        if 'Section              Base      Size(hex)    Size(dec)  SecOffs' == temp_line:
            start_check_flag = True
            print(temp_line)

    print("==========================")
    print(romsize_result)
    print(ramsize_result)
    print("==========================")
    test_ref_map_file.close()
    # test_references_map_file = ""
    # while True:
    #     line = test_ref_map_file.readline()
    #     test_references_map_file = test_references_map_file + line
    #     if not line : break
    test_map_file = """
        # __file__ is pip-*.whl/pip/__main__.py
        # first dirname call strips of '/__main__.py', second strips off '/pip'
        # Resulting path is the name of the wheel itself
        # Add that to sys.path so we can import pip
        """
    print(test_map_file)

    sys.exit(_main())

